#!/bin/bash
#
# ec2-init-run
# chkconfig: 234 98 01
#
# Provides: ec2-init-run

# Source function library.
. /etc/rc.d/init.d/functions
. /etc/profile.d/imperva.sh

module_include const platform

prog="ec2-init-run"
lockfile=/var/lock/subsys/$prog

ImpervaLicenseKey=""
WaitHandle=""
StackId=""
Region=""
ProductRole=""
ProductLicensing=""
AssetTag=""
is_ha=""
is_primary=""
is_terraform="false"
meta_data=""
SecurePassword=""
MxPassword=""
KMSKeyRegion=""
RegistrationParams=""

LOG_FILE=/var/log/ec2-init-run.log
BOTO_FILE="/etc/boto.cfg"

sssh_command="${const_ss_sssh}/sssh"

function announce_error()
{
	echo "$1" | tee --append ${LOG_FILE}
	if [[ "${WaitHandle}" != "" ]]; then
		unset PYTHONPATH
		unset LD_LIBRARY_PATH
		STACK_NAME=$(curl http://169.254.169.254/latest/user-data 2> /dev/null | grep StackId | awk -F/ '{print $2}')
		STACK_STATUS=$(aws cloudformation describe-stacks --region=${Region} --stack-name ${STACK_NAME} | /usr/bin/jq '.Stacks[].StackStatus' | tr -d '"')
		if [[ ${STACK_STATUS} == "UPDATE_IN_PROGRESS" ]];then
			aws cloudformation cancel-update-stack --region=${Region} --stack-name ${STACK_NAME}
		else
			platform_cfn_signal -e 1 -r "$1" "${WaitHandle}"
		fi
	fi
	exit 1
}

function unlock_the_box()
{
        public_key_path="/opt/SecureSphere/etc/ec2/Imperva_public_key.pem"
        signed_msg_path="/tmp/signed_msg"

        signed_base64_msg="$1"
        echo -n ${signed_base64_msg} | base64 --decode > ${signed_msg_path} 2> /dev/null
        if [[ "$?" != "0" ]]; then
		announce_error "Wrong Imperva license key #1"
                return 1
        fi

        account_id="$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | awk -F: '$1 ~ "accountId" { print $2 }' | awk -F'"' '{print $2}')"
        varification_flag=$(echo -n ${account_id} | openssl dgst -sha1 -verify ${public_key_path} -signature ${signed_msg_path} 2> /dev/null )
        if  [[ "${varification_flag}" == "Verified OK" ]]; then
                /bin/rm -f ${signed_msg_path}
                return 0
        elif  [[ "${varification_flag}" == "Verification Failure" ]]; then
		announce_error "Wrong Imperva license key #2"
                return 1
        else
		announce_error "Wrong Imperva license key #3 - ${varification_flag}"
                return 1
        fi
}

function start_sshd()
{
	systemctl enable sshd.service
	systemctl start sshd.service
}

function lock_into_ondemand()
{
	bootstrap_set "//bootstrap/platform/ec2" @sealed "true"
	return 0
}

function unlock_into_byol()
{	
	if [[ "${ImpervaLicenseKey}" == "" ]]; then
		start_sshd
		echo "'ImpervaLicenseKey' is not set" 2>&1 | tee --append "${LOG_FILE}"
		return 1
	fi

	if unlock_the_box "${ImpervaLicenseKey}"; then
		bootstrap_set "//bootstrap/platform/ec2" @sealed "false"
		# on ondemand (if was called from sssh command as- "service ec2-init-run unlock <imperva_license_key>"):
		start_sshd
		return 0
	else
		start_sshd
		echo "Error- Instance will not unlock. Please check the ImpervaLicenseKey parameter" 2>&1 | tee --append "${LOG_FILE}"
		return 1
	fi
}

function ec2_get_ssh()
{
	echo -e "DEVICE=eth0\nONBOOT=yes\nBOOTPROTO=dhcp" > /etc/sysconfig/network-scripts/ifcfg-eth0
	ps -ef | grep dhclient | grep -v grep | awk '{print $2}' | xargs -n1 kill -9
	sleep 1
	systemctl restart network.service
	sleep 2
	#echo -n "Barbapapa12@" | passwd --stdin mxserver
	#temp ends
	ProductLicensing=''
	user_data=$( mktemp )
	/usr/bin/wget -q http://169.254.169.254/latest/user-data -O ${user_data}
	ProductLicensing=$( grep ^ProductLicensing ${user_data} | cut -d: -f2- | sed 's/^ *//' | sed 's/ *$//' )
	rm -rf ${user_data}	

	if [[ "$(bootstrap_get //bootstrap/product @init-mode)" != "false" ]] && ! platform_is_xen_marketplace_ondemand && [[ "${ProductLicensing}" != "OnDemand" ]]; then
		echo "tmp - if 1" >> /var/log/ec2-get-ssh
		if [ ! -d /root/.ssh ]; then
			mkdir -p /root/.ssh
			chmod 700 /root/.ssh
		fi
		# Retrieve public key from metadata server using HTTP
		curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /tmp/my-public-key 2> /dev/null
		if [ $? -eq 0 ]; then
			# the following condition is Imperva's addition.
			# Comes in order to prevent unnecessary duplicates on the authorized_keys file.
			if [[ "$(grep "$(cat /tmp/my-public-key)" /root/.ssh/authorized_keys)" == "" ]] ; then
				echo "EC2: Retrieve public key from metadata server using HTTP." 
				cat /tmp/my-public-key >> /root/.ssh/authorized_keys
				chmod 600 /root/.ssh/authorized_keys
			fi
		fi
		/bin/rm -f /tmp/my-public-key
	else
		echo "tmp - if 2" >> /var/log/ec2-get-ssh
		newuser="$(cat /etc/passwd | awk -F: '$5 ~ "new user-" {print $1}')"
		cat /etc/passwd >> /var/log/ec2-get-ssh 2>&1
		echo "test" >> /var/log/ec2-get-ssh
		cat /etc/passwd | awk -F: '$5 ~ "new user-" {print $1}'  >> /var/log/ec2-get-ssh 2>&1
		echo "new-user - ${newuser}" >> /var/log/ec2-get-ssh
		if [[ "${newuser}" != "" ]]; then
			userhomedir="$(cat /etc/passwd | awk -v pat="${newuser}" -F: '$1 == pat {print $6}')"
			echo "userhomedir - ${userhomedir}" >> /var/log/ec2-get-ssh
			if [ ! -d ${userhomedir}/.ssh ]; then
				echo "tmp - if 3" >> /var/log/ec2-get-ssh
				mkdir -p ${userhomedir}/.ssh
				chmod 700 ${userhomedir}/.ssh
				chown -R ${newuser} ${userhomedir}/.ssh
				ls -latr ${userhomedir} >> /var/log/ec2-get-ssh
			fi
			# Retrieve public key from metadata server using HTTP
			curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /tmp/my-public-key
			curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /var/log/ec2-get-ssh
			if [ $? -eq 0 ]; then
				echo "tmp - if 4" >> /var/log/ec2-get-ssh
				# the following condition is Imperva's addition.
				# Comes in order to prevent unnecessary duplicates on the authorized_keys file.
				if [[ "$(grep "$(cat /tmp/my-public-key)" /home/${newuser}/.ssh/authorized_keys)" == "" ]] ; then
					echo "tmp - if 5" >> /var/log/ec2-get-ssh
					echo "EC2: Retrieve public key from metadata server using HTTP." 
					cat /tmp/my-public-key >> ${userhomedir}/.ssh/authorized_keys
					chmod 600 ${userhomedir}/.ssh/authorized_keys
					chown ${newuser} ${userhomedir}/.ssh/authorized_keys
				fi
			fi
			/bin/rm -f /tmp/my-public-key
		fi		
	fi
}

function run_full_configuration()
{
	if [[ ${ProductRole} == "gateway" ]]; then
		additional_ftl_flags="--product_role=gateway"
	elif [[ ${ProductRole} == "server" ]]; then
		additional_ftl_flags="--product_role=server"
	elif [[ ${ProductRole} == "som" ]]; then
		additional_ftl_flags="--product_role=som"
	else
		announce_error "Unrecognised product-code: ${ProductRole}"
	fi
	
	additional_ftl_flags="${additional_ftl_flags} --asset_tag=${AssetTag}"
		
	sealed_prefix=$1
	index_line=0
	mkdir -p /tmp/aws_error
	while true; do
		additional_flags=""
		command=$( cat /root/meta-data | /usr/bin/jq -r ".commands[${index_line}]" | sed 's/^ *//' | sed 's/ *$//' )
		if [[ "${command}" == "null" ]]; then
			break
		elif [[ "$(echo "${command}" | cut -c 1)" != "#" ]]; then
			command=$(echo -n $command | sed 's/^"//' | sed 's/"$//')
			command_name="$(basename $( echo ${command} | awk '{print $1}' ))"
			command_parameters="$( echo ${command} | awk '{for(i=2;i<NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}' )"
			case "${command_name}" in
			ec2_auto_ftl)
				additional_flags=${additional_ftl_flags}
				OUTPUT_FILE="/dev/null"
				;;
			*)
				OUTPUT_FILE="${LOG_FILE}"
			esac
			
			if [ "${sealed_prefix}" == "" ]; then
				eval ${command} ${additional_flags} 2>&1 | tee --append "${OUTPUT_FILE}"
			else
				${sealed_prefix} "${command_name} ${command_parameters} ${additional_flags}" 2>&1 | tee --append "${OUTPUT_FILE}"
			fi
			RETVAL=${PIPESTATUS[0]}

			if [[ "${RETVAL}" != "0" ]]; then
				
				echo "Command ${command_name} returned error code- ${RETVAL}. Exiting" | tee --append "${OUTPUT_FILE}"
				if [[ -s /tmp/aws_error/${command_name} ]];then
					announce_error "$(cat /tmp/aws_error/${command_name})"
				else
					announce_error "Command ${command_name} returned error code- ${RETVAL}. Exiting"
				fi
				
			
			fi
			
		fi
		(( index_line += 1 ))
	done
}

function run_full_configuration_as_unsealed()
{
	run_full_configuration
}

function run_full_configuration_as_sealed()
{	
	run_full_configuration ${sssh_command}
}

case "$1" in
  start)
	ec2_get_ssh
	if [[ "$(bootstrap_get //bootstrap/product @init-mode)" != "false" ]]; then
		unset PYTHONPATH
		
		/usr/bin/wget -q http://169.254.169.254/latest/user-data -O /root/user-data
		dos2unix /root/user-data
		
		if [[ "$(bootstrap_get //bootstrap/platform/ec2)" == "" ]]; then
			bootstrap_set --elem-add "//bootstrap" "platform" "<ec2 />"
		fi
	
		bootstrap_set "//bootstrap/platform/ec2" @sealed "false"
		
		if [[ "$(bootstrap_get //bootstrap/platform/ec2/proxy)" == "" ]]; then
			bootstrap_set --elem-add "//bootstrap/platform" "ec2" "<proxy />"
		fi

		# Set Signature 4 as default auth method for aws s3 (to work with new regions)
		unset LD_LIBRARY_PATH
		aws configure set default.s3.signature_version s3v4
		
		echo "[Boto]" >> ${BOTO_FILE}
		
		httpsproxyHost=""
		httpsproxyPort=""
		httpproxyUser=""
		httpproxyPass=""
		ProxyString=""
		IFS=$'\n'
		for user_data_line in $(cat /root/user-data); do
			key=$(echo $user_data_line | cut -d: -f1 | sed 's/^ *//' | sed 's/ *$//' )
			value=$(echo $user_data_line | cut -d: -f2- | sed 's/^ *//' | sed 's/ *$//' )
			
			case "${key}" in
			ImpervaLicenseKey)
				if [[ ${value} != "Null" ]];then
					ImpervaLicenseKey=$value
				fi
				;;
			WaitHandle)
				WaitHandle=$value
				;;
			StackId)
				StackId=$value
				;;
			StackName)
				StackName=$value
				;;
			Region)
				Region=$value
				;;
			ProductRole)
				ProductRole=$value
				;;
			GatewayMode)
				GatewayMode=$value
				;;
			ProductLicensing)
				ProductLicensing=$value
				;;
			AssetTag)
				AssetTag=$value
				;;
			https.proxyHost)
				if [[ ${value} != "Null" ]];then
					bootstrap_set //bootstrap/platform/ec2/proxy @https.proxyHost $value
					httpsproxyHost=$value
					echo "proxy = ${value}" >> ${BOTO_FILE}
					ProxyString+=" -DhttpsproxyHost=${value}"
				fi
				;;
			https.proxyPort)
				if [[ ${value} != "Null" ]];then
					bootstrap_set //bootstrap/platform/ec2/proxy @https.proxyPort $value
					httpsproxyPort=$value
					echo "proxy_port = ${value}" >> ${BOTO_FILE}
					ProxyString+=" -DhttpsproxyPort=${value}"
				fi
				;;
			http.proxyUser)
				if [[ ${value} != "Null" ]];then
					bootstrap_set //bootstrap/platform/ec2/proxy @http.proxyUser $value
					httpproxyUser=$value
					echo "proxy_user = ${value}" >> ${BOTO_FILE}
					ProxyString+=" -DhttpproxyUser=${value}"
				fi
				;;
			http.proxyPass)
				if [[ ${value} != "Null" ]];then
					bootstrap_set //bootstrap/platform/ec2/proxy @http.proxyPass $value
					httpproxyPass=$value
					echo "proxy_pass = ${value}" >> ${BOTO_FILE}
					ProxyString+=" -DhttpproxyPass=${value}"
				fi
				;;
			IsEnvHA)
				is_ha=$value
				;;			
			IsPrimaryHA)
				is_primary=$value
				;;
			IsTerraform)
				is_terraform=$value
				;;
			MetaData)
				meta_data=$value
				;;
			SecurePassword)
				SecurePassword=$value
				;;
			MxPassword)
				MxPassword=$value
				;;
			KMSKeyRegion)
				KMSKeyRegion=$value
				;;
			RegistrationParams)
				RegistrationParams=$value
				;;
			*)
				echo "Unknown key value in user-data ${key}" 2>&1 | tee --append "${LOG_FILE}"
				;;
			esac
		done
		#/bin/rm -f /root/user-data
		unset IFS
		echo "Finished reading user-data ${is_terraform} ${ProductRole} ${Region} ${AssetTag}" 2>&1 | tee --append "${LOG_FILE}"
		# Set proxy variables
		proxy_user_and_password=""
		if [[ "${httpproxyUser}" != "" && "${httpproxyPass}" != "" ]]; then
			proxy_user_and_password="${httpproxyUser}:${httpproxyPass}@"
		fi
		if [[ "${httpsproxyHost}" != "" && "${httpsproxyPort}" != "" ]]; then
			export https_proxy="http://${proxy_user_and_password}${httpsproxyHost}:${httpsproxyPort}"
			export EC2_JVM_ARGS="${ProxyString}"

			# Disable proxy for internal addresses
			export no_proxy="169.254.169.254,127.0.0.1"

			# Create proxy.sh file so other processes can enjoy the proxy settings
			echo "#!/bin/bash" > /etc/profile.d/proxy.sh
			echo "export https_proxy=\"${https_proxy}\"" >> /etc/profile.d/proxy.sh
			echo "export EC2_JVM_ARGS=\"${EC2_JVM_ARGS}\"" >> /etc/profile.d/proxy.sh
			echo "export no_proxy=\"${no_proxy}\"" >> /etc/profile.d/proxy.sh
			chmod 755 /etc/profile.d/proxy.sh
		fi


		# Check that instance was brought up with CloudFormation
		cf_error=false
		cf_message="Instance must be launched through CloudFormation with a valid Imperva template."
		
		
		[[ "${Region}" == "" ]]           && cf_error=true
		[[ "${ProductRole}" == "" ]]      && cf_error=true
		
		if [[ "${is_terraform}" == "false" ]]; then
			[[ "${StackId}" == "" ]]          && cf_error=true
		fi

		if [[ "${cf_error}" == "false" ]]; then
			if [[ "${is_terraform}" == "false" ]]; then
				stackResorces=$(aws cloudformation describe-stack-resources --region=$Region --stack-name $StackId --query 'StackResources[*].{Type:ResourceType,LogicalID:LogicalResourceId,PhysicalId:PhysicalResourceId,LogicalId:LogicalResourceId}' --output json | sed 's/\\n//g' 2> /tmp/tmp-cfn-error)		
				instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id 2> /dev/null)
				logicalIdForScaling=$(echo ${stackResorces} | /usr/bin/jq '.[] | select(.Type == "AWS::AutoScaling::LaunchConfiguration").LogicalId' | tr -d '"' | tr '\\' '"' 2> /tmp/tmp-cfn-error)
				logicalIdForInstance=$(echo ${stackResorces} | /usr/bin/jq --arg instanceId "$instanceId" '.[] | select(.Type=="AWS::EC2::Instance" and .PhysicalId==$instanceId).LogicalId' | tr -d '"' | tr '\\' '"' 2> /tmp/tmp-cfn-error)
				
				if [[ "${stackResorces}" == "" ]]; then
					cf_error=true
					cf_message="Failed connecting to CloudFormation, validate NAT instance or Proxy configuration (${ProductRole}). $(cat /tmp/tmp-cfn-error)"
				elif [[ "${logicalIdForInstance}" != "" ]]; then
					logicalId=$logicalIdForInstance
					aws cloudformation describe-stack-resource --region=$Region --stack-name $StackId --logical-resource-id $logicalIdForInstance 2> /tmp/tmp-cfn-error | sed 's/\\n//g' | /usr/bin/jq -r '.StackResourceDetail.Metadata' 2> /dev/null  > /root/meta-data
					retval=$?
				elif [[ "${logicalIdForScaling}" != "" ]]; then
					logicalId=$logicalIdForScaling
					aws cloudformation describe-stack-resource --region=$Region --stack-name $StackId --logical-resource-id $logicalIdForScaling 2> /tmp/tmp-cfn-error | sed 's/\\n//g' | /usr/bin/jq -r '.StackResourceDetail.Metadata' 2> /dev/null  > /root/meta-data
					retval=$?
				else
					cf_error=true
					cf_message="Failed to locate the relevant resource within the CloudFormation template (${ProductRole}). $(cat /tmp/tmp-cfn-error)"
				fi
			else
				if [[ "${KMSKeyRegion}" != "" ]]; then
					#decrypt passwords
					if [[ "${SecurePassword}" != "" ]]; then
						SecurePassword=$(aws kms decrypt --region "${KMSKeyRegion}" --ciphertext-blob fileb://<(echo "${SecurePassword}" | base64 -d) --output text --query Plaintext | base64 --decode)
					fi
					if [[ "${MxPassword}" != "" ]]; then
						MxPassword=$(aws kms decrypt --region "${KMSKeyRegion}" --ciphertext-blob fileb://<(echo "${MxPassword}" | base64 -d) --output text --query Plaintext | base64 --decode)
					fi
					retval=$?
				fi
				
				meta_data="${meta_data//%securePassword%/$SecurePassword}"
				meta_data="${meta_data//%mxPassword%/$MxPassword}"
				echo "${meta_data}" > /root/meta-data
				dos2unix /root/meta-data
				
				if [[ "${RegistrationParams}" != "" ]]; then
					echo "${RegistrationParams}" > /root/registration-params
					dos2unix /root/registration-params
				fi
			fi
			
			if [[ $retval -ne 0 ]]; then
				cf_error=true
				cf_message="Failed to retrieve meta-date section from resource: ${logicalId} (${ProductRole}). $(cat /tmp/tmp-cfn-error)"
			fi
			
			if [[ "${ProductRole}" == "gateway" ]]; then
				echo ${GatewayMode} > /opt/SecureSphere/etc/GatewayMode
			fi
		fi

		# If ssh is already on - then this is the ami creation and we don't want to block it
		systemctl is-enabled sshd.service
		if [[ $? -ne 0 ]] && [[ "${cf_error}" == "true" ]]; then
			# Bringing up root ssh with error message
			if [ ! -d /root/.ssh ]; then
				mkdir -p /root/.ssh
				chmod 700 /root/.ssh
			fi
			if [[ "${is_terraform}" == "false" ]]; then
				curl -f http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key > /tmp/my-public-key 2> /dev/null
			else
				#TODO for terraform
				echo "terraform"
			fi
			
			if [[ $? -eq 0 ]] && [[ "${is_terraform}" == "false" ]]; then
				sed -i "s/^/command=\"echo -e '\\\nERROR: ${cf_message}\\\nPlease refer to Imperva documentation.\\\n\\\n'\",no-port-forwarding,no-x11-forwarding,no-agent-forwarding /" /tmp/my-public-key
				mv -f /tmp/my-public-key /root/.ssh/authorized_keys
				chmod 600 /root/.ssh/authorized_keys
				start_sshd
			fi

			announce_error "ERROR: ${cf_message} Please refer to Imperva documentation."
		fi

		if [[ "${is_terraform}" == "false" ]]; then
			[[ "${WaitHandle}" == "" ]]       && announce_error "'WaitHandle' CF template variable is not set (${ProductRole})"
		fi
		[[ "${AssetTag}" == "" ]]         && announce_error "'AssetTag' CF template variable is not set (${ProductRole})"
		[[ "${ProductLicensing}" == "" ]] && announce_error "'ProductLicensing' CF template variable is not set (${ProductRole})"
		
		if platform_is_xen_marketplace_ondemand; then
			[[ "${AssetTag}" != "$(platform_show_xen_marketplace_ondemand_asset_tag)" ]] && announce_error "'AssetTag' CF template variable value is inconsistent with the product's AssetTag (${ProductRole})"
		fi
		
		if platform_is_xen_marketplace_byol; then
			ProductLicensing_byProductCode="BYOL"
			[[ "${ProductRole}" != "gateway" && "${ProductRole}" != "server" && "${ProductRole}" != "som" ]] && announce_error "'ProductRole' CF template variable value must be 'gateway', 'som' or 'server' (${ProductRole})"
		elif platform_is_xen_marketplace_ondemand_gateway; then
			ProductLicensing_byProductCode="OnDemand"
			[[ "${ProductRole}" != "gateway" ]] && announce_error "'ProductRole' CF template variable value must be set to 'gateway' (${ProductRole})"
		elif platform_is_xen_marketplace_ondemand_mx; then
			ProductLicensing_byProductCode="OnDemand"
			[[ "${ProductRole}" != "server" && "${ProductRole}" != "som" ]] && announce_error "'ProductRole' CF template variable value must be set to 'server' or 'som' (${ProductRole})"
		elif platform_is_xen_marketplace; then
			if [[ "${is_terraform}" == "false" ]]; then
				announce_error "Unrecognized product-id"
			fi
		fi

		if [[ "${is_terraform}" == "false" ]]; then
			platform_is_xen_marketplace && [[ "${ProductLicensing}" != "${ProductLicensing_byProductCode}" ]] && announce_error "'ProductLicensing' CF template variable value is inconsistent with the product's licensing type (${ProductRole})"
		fi
		
		# Test metadata
		if [[ "${is_terraform}" == "false" ]]; then
			test_command=$( /usr/bin/jq -r ".commands[0]" /root/meta-data )
			if [[ "${test_command}" == "" ]] || [[ "${test_command}" == "null" ]]; then
				announce_error "Error parsing metadata commands (${ProductRole}). Check JSON structure and network connectivity (NAT instance or Proxy)"
			fi
		else
			#TODO for terraform, imitate /root/meta-data for terraform
			echo "terraform"
		fi
		
		touch /var/log/sssh
		chmod 666 /var/log/sssh
		
		if unlock_into_byol || [[ "$(bootstrap_get //bootstrap/product @init-mode)" != "false" ]];then
			run_full_configuration_as_unsealed
		else
			run_full_configuration_as_sealed
		fi
		#/bin/rm -f /root/meta-data
	fi
	touch $lockfile
	
	;;

  stop)
	if [[ -e /opt/SecureSphere/etc/GatewayMode ]];then
		GatewayMode=$(cat /opt/SecureSphere/etc/GatewayMode)
		if [[ ${GatewayMode} == "waf" ]];then
			impctl gateway unregister --full-unregistration 2>&1 | tee --append "${LOG_FILE}"
			impctl support gateway delete-local-config
		fi
	fi
	rm -f $lockfile
  ;;

  unlock)
	shift
	ImpervaLicenseKey=$1
	unlock_into_byol
	exit $?
  ;;

  lock)
	lock_into_ondemand
	exit $?
  ;;

  *)
        echo "Usage: $0 {start|stop|unlock|lock}"
        exit 1
esac

exit 0
