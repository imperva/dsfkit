#!/bin/bash -x
set -e
set -u
set -x
cd /root || exit 1

function internet_access() {
    if [ -z "$${INTERNET_ACCESS-}" ]; then
        timeout=300 # 5 minutes
        start_time=$(date +%s)
        while ! curl --connect-timeout 30 www.google.com &>/dev/null; do # icmp packets might not be supported
            echo "Waiting for network availability..."
            sleep 10
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))
            if [ $elapsed_time -ge $timeout ]; then
                echo "Timeout: network is not available after $timeout seconds"
                INTERNET_ACCESS="false"
                return 1
            fi
        done
        INTERNET_ACCESS="true"
    fi
    if [ "$INTERNET_ACCESS" == "true" ]; then
        return 0
    else
        return 1
    fi
}

function install_yum_dep_from_internet() {
    if ! internet_access; then
        echo "Error: No outbound internet access. Either enable outbound internet access, or make sure $@ is installed in the base ami"
        exit 1
    fi
    local package="$1"
    local package_name="$${2:-$1}"

    if ! yum list installed "$${package_name}"; then
        yum install "$${package}" -y \
          || yum install "$${package}" -y \
          || yum install "$${package}" -y \
          || yum install "$${package}" -y \
          || yum install "$${package}" -y # trying x times since sometimes there is a glitch with the entitlement server
    fi
}

function install_awscli_from_internet() {
    if ! internet_access; then
        echo "Error: No outbound internet access. Either enable outbound internet access, or make sure awscli is installed in the base ami"
        exit 1
    fi
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip -q awscliv2.zip
    aws/install
    rm -rf aws awscliv2.zip
}

function install_deps() {
    install_yum_dep_from_internet unzip
    install_yum_dep_from_internet lvm2
    install_yum_dep_from_internet https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm epel-release
    install_yum_dep_from_internet jq
    install_yum_dep_from_internet wget
    test -f /usr/local/bin/aws || install_awscli_from_internet
}

function create_users_and_groups() {
    id sonargd || useradd sonargd
    id sonarg  || useradd sonarg
    id sonarw  || useradd sonarw
    getent group sonar || groupadd sonar
    usermod -g sonar sonarw
    usermod -g sonar sonargd
}

function create_lvm() {
    # Set the physical device name
    physical_device=$1

    # Set the volume group name from an environment variable
    volume_group_name="sonar"

    # Create physical volume
    pvcreate $physical_device

    # Create volume group
    vgcreate $volume_group_name $physical_device

    # Create logical volumes with lowercase names
    lvcreate --name logs -L 20G $volume_group_name
    lvcreate --name local -L 20G $volume_group_name
    lvcreate --name apps -L 30G $volume_group_name
    lvcreate -l 100%FREE --name data $volume_group_name

    # Format the logical volumes with desired filesystem (e.g., xfs)
    mkfs.xfs /dev/$volume_group_name/logs
    mkfs.xfs /dev/$volume_group_name/local
    mkfs.xfs /dev/$volume_group_name/apps
    mkfs.xfs /dev/$volume_group_name/data

    # Create mount points
    mkdir -p $LOGS_DIR
    mkdir -p $LOCAL_DIR
    mkdir -p $APPS_DIR
    mkdir -p $DATA_DIR

    # Add entries to /etc/fstab for automatic mounting on boot
    echo "/dev/$volume_group_name/logs $LOGS_DIR xfs defaults 0 0" >> /etc/fstab
    echo "/dev/$volume_group_name/local $LOCAL_DIR xfs defaults 0 0" >> /etc/fstab
    echo "/dev/$volume_group_name/apps $APPS_DIR xfs defaults 0 0" >> /etc/fstab
    echo "/dev/$volume_group_name/data $DATA_DIR xfs defaults 0 0" >> /etc/fstab
}

# Formatting and mounting the external ebs device
function attach_disk() {
    ## Find device name ebs external device
    number_of_expected_disks=2
    lsblk
    DEVICES=$(lsblk --noheadings -o NAME | grep "^[a-zA-Z]")
    while [ "$(wc -w <<< $DEVICES)" -lt "$number_of_expected_disks" ]; do
        DEVICES=$(lsblk --noheadings -o NAME | grep "^[a-zA-Z]")
        echo "Waiting for all external disk attachments"
        sleep 10
    done

    for d in $DEVICES; do
        if [ "$(lsblk --noheadings -o NAME| grep $d | wc -l)" -eq 1 ]; then
            DEVICE=$d;
            break;
        fi;
    done

    if [ -z "$DEVICE" ]; then
        echo "No external device is found"
        exit 1
    fi

    lsblk -no FSTYPE /dev/$DEVICE
    FS=$(lsblk -no FSTYPE /dev/$DEVICE | head -1)
    if [ "$FS" != "LVM2_member" ]; then
        echo "/dev/$DEVICE is not lvm memeber (\"$FS\"). Formatting it..."
        create_lvm /dev/$DEVICE
    fi

    mount -a
}

function install_tarball() {
    echo Downloading tarball..
    # Download installation tarball
    if [[ -n "${tarball_url}" ]]; then
        TARBALL_FILE=$APPS_DIR/$(basename "${tarball_url}")
        wget "${tarball_url}" -O "$TARBALL_FILE"
    else
        TARBALL_FILE=$APPS_DIR/$(basename "${installation_s3_key}")
        /usr/local/bin/aws s3 cp "s3://${installation_s3_bucket}/${installation_s3_key}" "$TARBALL_FILE" --region "${installation_s3_region}" >/dev/null
    fi

    echo Installing tarball..
    # Installing tarball
    sudo tar -xf $TARBALL_FILE -gz -C $APPS_DIR
    rm $TARBALL_FILE
    sudo chown -R sonarw:sonar $APPS_DIR
}

function set_instance_fqdn() {
    instance_fqdn=$(cloud-init query -a | jq -r .ds.meta_data.local_ipv4)
    if [ -z "$instance_fqdn" ]; then
        echo "Failed to extract instance private FQDN"
        exit 1
    fi
}

verlte() {
    [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}

verlt() {
    [ "$1" = "$2" ] && return 1 || verlte $1 $2
}

function setup() {
    set_instance_fqdn
    VERSION=$(ls $APPS_DIR/jsonar/apps -Art | tail -1)
    echo Setup sonar $VERSION

    password=$(/usr/local/bin/aws secretsmanager get-secret-value --secret-id ${password_secret} --query SecretString --output text)

    if verlt $VERSION 4.10; then
        PRODUCT="imperva-data-security"
    else
        PRODUCT="data-security-fabric"
    fi

    sudo $APPS_DIR/jsonar/apps/"$VERSION"/bin/sonarg-setup --no-interactive \
        --accept-eula \
        --jsonar-uid-display-name "${display_name}" \
        --product "$PRODUCT" \
        --newadmin-pass="$password" \
        --secadmin-pass="$password" \
        --sonarg-pass="$password" \
        --sonargd-pass="$password" \
        --jsonar-datadir=$DATA_DIR \
        --jsonar-localdir=$LOCAL_DIR \
        --jsonar-logdir=$LOGS_DIR \
        --jsonar-uid ${jsonar_uuid} \
        --instance-IP-or-DNS=$instance_fqdn \
        $(test "${resource_type}" == "agentless-gw" && echo "--remote-machine") ${additional_install_parameters}
}

function set_environment_vars() {
    echo Setting environment vars
    if [ ! -f /etc/profile.d/jsonar.sh ]; then
        echo 'export $(cat /etc/sysconfig/jsonar '$LOCAL_DIR'/sonarg/sysconfig/machine)' | sudo tee /etc/profile.d/jsonar.sh
    fi
    . /etc/sysconfig/jsonar
}

function install_ssh_keys() {
    echo Installing SSH keys
    mkdir -p /home/sonarw/.ssh/
    touch /home/sonarw/.ssh/authorized_keys

    # install the generated main node public and private keys in the main node and the DR node
    /usr/local/bin/aws secretsmanager get-secret-value --secret-id ${main_node_sonarw_private_key_secret} --query SecretString --output text > /home/sonarw/.ssh/id_rsa
    echo "${main_node_sonarw_public_key}" > /home/sonarw/.ssh/id_rsa.pub

    # enable communication between a pair of main and DR nodes
    grep -q "${main_node_sonarw_public_key}" /home/sonarw/.ssh/authorized_keys || echo "${main_node_sonarw_public_key}" | tee -a /home/sonarw/.ssh/authorized_keys > /dev/null

    # enable communication between the the main/DR hub and the Gateway
    if [ "${resource_type}" == "agentless-gw" ]; then
        grep -q "${hub_sonarw_public_key}" /home/sonarw/.ssh/authorized_keys || echo "${hub_sonarw_public_key}" | tee -a /home/sonarw/.ssh/authorized_keys > /dev/null
    fi

    chown -R sonarw:sonar /home/sonarw/.ssh
    chmod -R 600 /home/sonarw/.ssh
    chmod 700 /home/sonarw/.ssh
}

function install_access_tokens() {
    if [ "${resource_type}" == "hub" ]; then
        echo Creating hub EDSF admin user
        client_id="EDSF-admin"
        user_id=$(uuidgen)
        issuer="terraform"
        time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")

        CERT_AS_PASSWD=$(cat "$JSONAR_LOCALDIR"/ssl/client/admin/cert.pem | awk -vORS="\\\n" '1')

        $JSONAR_BASEDIR/bin/mongo --quiet --port 27117 --authenticationMechanism PLAIN --authenticationDatabase '$external' -u 'CN=admin' -p"$CERT_AS_PASSWD" <<__EOF__
use admin
db.system.users.save({ "_id" : "admin.$client_id", "user" : "$client_id", "db" : "admin", "userId" : "$user_id", "roles" : [ { "db" : "admin", "role" : "root" } ] })
__EOF__

        %{ for token_value in access_tokens_array }
        echo 'Creating ${token_value.name} token:'
        reason='${token_value.name}'
        scopes='${token_value.scopes}'
        access_token=$(/usr/local/bin/aws secretsmanager get-secret-value --secret-id ${token_value.secret_name} --query SecretString --output text)
        if [ -z "$access_token" ]; then
            echo "access_token is empty"
            exit 1
        fi
        $JSONAR_BASEDIR/bin/mongo --quiet --port 27117 --authenticationMechanism PLAIN --authenticationDatabase '$external' -u 'CN=admin' -p"$CERT_AS_PASSWD" <<__EOF__
use admin
db.studio_auth_token.save({ "tid" : "$access_token", "issuer" : "$issuer", "subject" : "$client_id", "issuedAt" : ISODate("$time"), "startDate" : ISODate("$time"), "revoked" : false, "reason" : "$reason", "grants" : $scopes })
__EOF__
        %{ endfor ~}
    fi
}

DATA_DIR="${base_directory}/data"
LOGS_DIR="${base_directory}/logs"
LOCAL_DIR="${base_directory}/local"
APPS_DIR="${base_directory}/apps"

install_deps
create_users_and_groups
attach_disk

LAST_INSTALLATION_SOURCE=$DATA_DIR/last_install_source.txt

if [ ! -f $LAST_INSTALLATION_SOURCE ] || [ "$(cat $LAST_INSTALLATION_SOURCE)" != "s3://${installation_s3_bucket}/${installation_s3_key}" ]; then
    install_tarball
    setup
    echo "s3://${installation_s3_bucket}/${installation_s3_key}" | sudo tee $LAST_INSTALLATION_SOURCE > /dev/null
fi

set_environment_vars
install_ssh_keys
install_access_tokens
