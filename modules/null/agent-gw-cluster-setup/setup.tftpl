#!/bin/bash
set -x
set -e

cookie_file=$(mktemp)

trap "curl -k -s --cookie $cookie_file --request DELETE https://${mx_address}:${mx_port}/SecureSphere/api/v1/auth/session; rm -f $cookie_file" EXIT

# Create an empty cluster if doesn't already exist, e.g., from previous Terraform apply
function maybeCreateCluster() {
    local local_cluster_id=$1
    request_body="{\"name\":\"${cluster_name}\", \"clusterType\":\"REGULAR_CLUSTER\", \"autoLoadBalance\":true, \"hasRedundant\":true, \"networkTopology\":\"Single\"}"
    response=$(curl -k -s -X POST -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/experimental/plugin/clusters" \
      -d "$request_body" \
      -H "Content-Type: application/json")

    # Handle response: {"errors":[{"description":"An item with this name already exists - please select a different name","error-code":"IMP-10005"}]}
    if echo $response | grep 'IMP-10005' &>/dev/null; then
      echo "Cluster '${cluster_name}' already exists. Getting its Id."

      response=$(curl -k -s -X GET -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/experimental/plugin/clusters/?clusterName=${cluster_name}")
      if echo $response | grep 'errors' &>/dev/null; then
        echo "Failed to get Cluster by name. MX response: $response"
        exit 1
      else
        cluster_id=$(echo "$response" | jq -r '.[] | .id')
        echo "Cluster '${cluster_name}' already existed with id '$cluster_id'"
      fi
    elif echo $response | grep 'errors' &>/dev/null; then
      echo "Failed to create an empty Cluster. MX response: $response"
      exit 1
    else
      cluster_id=$(echo "$response" | jq -r '.id')
      echo "Cluster '${cluster_name}' was created with id '$cluster_id'"
    fi
    eval $local_cluster_id=$cluster_id
}

function moveGatewayToCluster() {
  gw_name=$1
  response=$(curl -k -s -X PUT -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/v1/conf/gateways/$gw_name/move/${cluster_name}")

  if echo $response | grep 'errors' &>/dev/null; then
    echo "Failed to move gateway $gw_name to cluster ${cluster_name}. MX response: $response"
    exit 1
  else
    echo "Gateway $gw_name was moved to cluster ${cluster_name}"
  fi
}

# Step 1: Login
response=$(curl -k -s -X POST --cookie-jar $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/v1/auth/session" \
  --header "Authorization: Basic ${https_auth_header}")

if echo $response | grep 'errors' &>/dev/null; then
  echo "Failed to login to the MX. MX response: $response"
  exit 1
fi

# Step 2: Get all gateways in the gateway group
response=$(curl -k -s -X GET -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/v1/conf/gatewayGroups/${gateway_group_name}/gateways")

if echo $response | grep 'errors' &>/dev/null; then
  echo "Failed get all gateways in the gateway group. MX response: $response"
  exit 1
fi

gw_names=($(echo "$response" | jq -r '.gateways[].name'))

if [ -z "$gw_names" ]; then
  echo "Failed to extract the gateway names in the gateway group"
  exit 1
fi

gw_count=$${#gw_names[@]}

if [ "$gw_count" -ge 2 ]; then
  echo "The number of gateways in '${gateway_group_name}' is $gw_count"
else
  echo "Expected at least 2 gateways in gateway group '${gateway_group_name}', which is the minimum number required to setup a Cluster, but was $gw_count"
  exit 1
fi

# Step 3: Create cluster
maybeCreateCluster cluster_id

# Step 4: Move the first two gateways to the cluster
gw0_name=$${gw_names[0]}
gw1_name=$${gw_names[1]}

moveGatewayToCluster $gw0_name
moveGatewayToCluster $gw1_name

# Step 5: Update the cluster and activate it
subnet="{\"ip\":\"0.0.0.0\",\"mask\":0}"
request_body="{\"id\":\"$cluster_id\", \"networkTopology\":\"Single\", \"manager1Name\": \"$gw0_name\", \"manager2Name\": \"$gw1_name\", \"useUnlimitedCapacity\": false, \"userDefinedGatewayWeightCapacity\": 15000, \"clusterSubnetDTO\": $subnet, \"agentsSubnetDTO\": $subnet, \"mxSubnetDTO\": $subnet, \"active\": true}"
response=$(curl -k -s -X POST -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/experimental/plugin/clusters/$cluster_id" \
  -d "$request_body" \
  -H "Content-Type: application/json")

if echo $response | grep 'errors' &>/dev/null; then
  echo "Failed to update cluster '${cluster_name}'. MX response: $response"
  exit 1
else
  echo "Cluster '${cluster_name}' was updated. Activating..."
fi

# Step 6: Wait for the cluster to become active
timeout=120 # 2 minutes
start_time=$(date +%s)
while true; do
  sleep 10
  response=$(curl -k -s -X GET -b $cookie_file "https://${mx_address}:${mx_port}/SecureSphere/api/experimental/plugin/clusters/$cluster_id")

  if echo $response | grep 'errors' &>/dev/null; then
    echo "Failed to get cluster with Id '$cluster_id' and name '$cluster_name'. MX response: $response"
    exit 1
  else
    active=$(echo "$response" | jq -r '.active')
    if [ "$active" == "true" ]; then
        echo "Cluster '${cluster_name}' is active"
        break
    else
      current_time=$(date +%s)
      elapsed_time=$((current_time - start_time))
      if [ $elapsed_time -ge $timeout ]; then
        echo "Timeout: Cluster '${cluster_name}' is not active after $timeout seconds"
        break
        # TODO I prefer not to fail the deployment over this, it can be investigated in the MX/Gateway
        #exit 1
      fi
    fi
  fi
done

# Step 7: Move the other gateways to the cluster
other_gw_names=("$${gw_names[@]:2}")

for gw_name in "$${other_gw_names[@]}"; do
  moveGatewayToCluster $gw_name
done

# Step 8: Cleanup - delete the gateway group
if [ "${delete_gateway_group}" == "true" ]; then
  http_code=$(curl -k -s --cookie $cookie_file -w "%%{http_code}" --request DELETE "https://${mx_address}:${mx_port}/SecureSphere/api/v1/conf/gatewayGroups/${gateway_group_name}")
  if [ $http_code -ne 200 ]; then
    echo "Failed to delete gateway group '${gateway_group_name}'. MX response: $response"
  else
    echo "Deleted gateway group '${gateway_group_name}'"
  fi
fi

echo "Finished setup of cluster '${cluster_name}'. Check the cluster's status in the web console."
