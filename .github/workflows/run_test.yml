name: 'Run Test'

on:
  workflow_call:
    inputs:
      use_modules_from_terraform_registry:
        required: true
        type: boolean
      explicit_ref:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      DAM_LICENSE:
        required: true

  workflow_dispatch:
    inputs:
      use_modules_from_terraform_registry:
        type: boolean
        required: false

env:
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  TF_VAR_gw_count: 2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Sonar DSF POC Basic Upgrade
            workspace: sonar_dsf_basic_upgrade-
            enable_sonar: true
            enable_dam: false
            enable_dra: false
            hub_hadr: false
            agentless_gw_hadr: false

    name: '${{ matrix.name }}'
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_EXAMPLE_DIR: ./examples/poc/dsf_deployment
      UPGRADE_EXAMPLE_DIR: ./examples/sonar_upgrade
      AWS_REGION: eu-west-2
      SONAR_TARGET_VERSION: 4.13.0.10
      TF_VAR_enable_sonar: ${{ matrix.enable_sonar }}
      TF_VAR_enable_dam: ${{ matrix.enable_dam }}
      TF_VAR_enable_dra: ${{ matrix.enable_dra }}
      TF_VAR_sonar_version: 4.11.0.0
      TF_VAR_hub_hadr: ${{ matrix.hub_hadr }}
      TF_VAR_agentless_gw_hadr: ${{ matrix.agentless_gw_hadr }}
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:

      - name: Pick ref
        run: |
          if [ -z "${{ inputs.explicit_ref }}" ]; then
            echo REF=${{ github.ref }} >> $GITHUB_ENV;
          else
            echo REF=${{ inputs.explicit_ref }} >> $GITHUB_ENV;
          fi

      - name: Set Workspace Name
        run: |
          echo "Event Name: ${{ github.event_name }}"
          if [ ${{ github.event_name }} == 'schedule' ]; then
            echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.event_name }}-$REF >> $GITHUB_ENV
          else
            echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ inputs.explicit_ref }} >> $GITHUB_ENV
            echo TMP_WORKSPACE_NAME=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ inputs.explicit_ref }} >> $GITHUB_ENV
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF }}

      - name: Change the modules source to local
        if: ${{ inputs.use_modules_from_terraform_registry == false }}
        run: |
          find ./examples/ -type f -exec sed -i -f sed.expr {} \;

      - name: Sets env vars for environment
        run: |
          echo "TF_VAR_tarball_s3_bucket=0ed58e18-0c0c-11ed-861d-0242ac120003" >> $GITHUB_ENV
        if: github.ref != 'refs/heads/"master"'

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: ~1.6.0

      - name: Setup jq
        uses: sergeysova/jq-action@v2

      #### Deployment

      #### Upgrade

      - name: Prepare upgrade input
        run: |
          dsfkit_version_line=$(grep -m 1 "# latest release tag" ${UPGRADE_EXAMPLE_DIR}/main.tf)
          echo "The grepped line: $dsfkit_version_line"

        #### Cleanup

      - name: Terraform Delete Workspace
        if: always()
        run: |
          if [ '${{ steps.destroy_deployment.conclusion }}' == 'success' ] && [ ${{ github.event_name }} != 'schedule' ]; then
            terraform -chdir=$DEPLOYMENT_EXAMPLE_DIR workspace delete $TMP_WORKSPACE_NAME
          fi
        env:
          TF_WORKSPACE: default

