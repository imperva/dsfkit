name: 'Terraform Plan'

on:
  workflow_call:
    inputs:
      use_modules_from_terraform_registry:
        required: true
        type: boolean
      explicit_ref:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

  workflow_dispatch:
    inputs:
      use_modules_from_terraform_registry:
        type: boolean
        required: false

  push:
    branches:
      - '*'
      - '!master'
      - '!dev'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        example: ['./examples/poc/basic_deployment', './examples/poc/hadr_deployment']

    steps:
      - name: Pick ref
        run: |
          if [ -z "${{ inputs.explicit_ref }}" ]; then
            echo REF=${{ github.ref }} >> $GITHUB_ENV;
          else
            echo REF=${{ inputs.explicit_ref }} >> $GITHUB_ENV;
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF }}

      - name: Change the modules source to local
        if: ${{ inputs.use_modules_from_terraform_registry == false }}
        run: |
          find ./examples/ -type f -exec sed -i -f sed.expr {} \;

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~1.4.0

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir=${{ matrix.example }} init

      - name: Terraform Validate
        run: terraform -chdir=${{ matrix.example }} validate

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan (simple)
        run: terraform -chdir=${{ matrix.example }} plan

