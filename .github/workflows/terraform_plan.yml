name: 'Terraform Plan'

on:
  workflow_dispatch: {}
  push:
    branches:
      - '*'
      - '!master'
      - '!dev'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  AWS_REGION: us-west-2
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        example: ['./examples/poc/basic_deployment', './examples/poc/hadr_deployment']

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Change the modules source to local
        run: |
          find . -type f -exec sed -i -e 's/source *= \"github.com\/imperva\/dsfkit\/\/deploy\/modules/source = \"..\/..\/..\/modules\/aws/' -e 's/?ref=.*/"/' {} \;
          ! grep -rnw '.' -e 'github\.com/imperva/dsfkit//modules'

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform -chdir=${{ matrix.example }} init

      - name: Terraform Validate
        run: terraform -chdir=${{ matrix.example }} validate

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      # Generates an execution plan for Terraform
      - name: Terraform Plan (simple)
        run: terraform -chdir=${{ matrix.example }} plan

