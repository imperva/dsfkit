name: 'DSF POC CLI - Azure'

on:
  workflow_call:
    inputs:
      use_modules_from_terraform_registry:
        required: true
        type: boolean
      deployment_type:
        required: false
        type: string
        default: 'all'
      product_full_version:
        type: string
        default: 'latest'
        required: false

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      DAM_LICENSE:
        required: true
      ALLOWED_SSH_CIDRS:
        required: true

  workflow_dispatch:
    inputs:
      use_modules_from_terraform_registry:
        description: 'Use modules from Terraform Registry'
        type: boolean
        required: false
      delay_destroy:
        description: 'Delay the destroy step and subsequent steps to allow investigation'
        type: boolean
        default: false
        required: false
      deployment_type:
        description: 'Choose the type of deployments to run: all (default), sonar, dam, dra'
        type: string
        default: 'all'
        required: false
      product_full_version:
        description: 'Product (DAM, DRA, SONAR) version to deploy, default is latest. For DAM and Sonar use the full version number (e.g. 4.17.0.10.0) and for DRA use the build number (e.g. 4.17.0.10.0.6_31077)'
        type: string
        default: 'latest'
        required: false

  push:
    branches:
      - 'dev'
    paths:
      - 'modules/azurerm/**'
      - 'modules/null/**'
      - 'examples/azure/poc/dsf_deployment/*'

  pull_request:
    types:
      - 'opened'
      - 'reopened'
    branches:
      - 'dev'
    paths:
      - 'modules/azurerm/**'
      - 'modules/null/**'
      - 'examples/azure/poc/dsf_deployment/*'

env:
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # aws creds are needed for s3 backend
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ vars.ARM_CLIENT_ID }}
  ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  DESTROY_DELAY_SECONDS: 1800
  WORKING_DIRECTORY: examples/azure/poc/dsf_deployment
  TERRAFORM_VERSION: "~1.7.0"

permissions:
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        env:
          VAR: ${{ github.event.inputs.deployment_type || 'all' }}
        run: |
          MATRIX=$(jq -n --compact-output --arg var "$VAR" '{
            "include": [
              (if $var == "all" then {"name":"DSF POC","workspace":"azure_cli-all-","enable_sonar":true,"enable_dam":true,"enable_dra":true} else empty end),
              (if $var == "all" or $var == "sonar" then {"name":"DSF POC - SONAR","workspace":"azure_cli-sonar-","enable_sonar":true,"enable_dam":false,"enable_dra":false} else empty end),
              (if $var == "all" or $var == "dam" then {"name":"DSF POC - DAM","workspace":"azure_cli-dam-","enable_sonar":false,"enable_dam":true,"enable_dra":false} else empty end),
              (if $var == "all" or $var == "dra" then {"name":"DSF POC - DRA","workspace":"azure_cli-dra-","enable_sonar":false,"enable_dam":false,"enable_dra":true} else empty end)
            ]
          }')

          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  terraform:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}

    name: '${{ matrix.name }}'
    runs-on: ubuntu-latest
    environment: test

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set Workspace Name
      run: |
        echo "Event Name: ${{ github.event_name }}"
        if [ ${{ github.event_name }} == 'schedule' ]; then
          echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.event_name }}-${{ github.ref }} >> $GITHUB_ENV
        else
          echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ github.github.ref }} >> $GITHUB_ENV
          echo TMP_WORKSPACE_NAME=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ github.github.ref }} >> $GITHUB_ENV
        fi

    - name: Change the modules source to local
      if: ${{ inputs.use_modules_from_terraform_registry == false }}
      run: find -type f -exec sed -i -f "${GITHUB_WORKSPACE}/sed.expr" {} \;

    - name: Create terraform backend file
      run: |
        cat << EOF > backend.tf
        terraform {
          backend "s3" {
            bucket         = "terraform-state-bucket-dsfkit-github-tests"
            key            = "states/terraform.tfstate"
            dynamodb_table = "terraform-state-lock"
            region         = "us-east-1"
          }
        }
        EOF

    - name: Set parameters in azure storage account
      run: |
        if [ "${{ github.event.inputs.deployment_type }}" == "dra" ] && [ "${{ github.event.inputs.product_full_version }}" != "latest" ] && [ -n "${{ github.event.inputs.product_full_version }}" ]; then
          PATH_TO_DRA_ANALYTICS_VHD="DRA-${{ github.event.inputs.product_full_version }}_x86_64-Analytics.vhd"
          PATH_TO_DRA_ADMIN_VHD="DRA-${{ github.event.inputs.product_full_version }}_x86_64-Admin.vhd"
        else
          PATH_TO_DRA_ANALYTICS_VHD="DRA-4.17.0.10.0.6_31077_x86_64-Analytics.vhd"
          PATH_TO_DRA_ADMIN_VHD="DRA-4.17.0.10.0.6_31077_x86_64-Admin.vhd"
        fi
        
        if [ "${{ github.event.inputs.deployment_type }}" == "sonar" ] && [ "${{ github.event.inputs.product_full_version }}" != "latest" ] && [ -n "${{ github.event.inputs.product_full_version }}" ]; then  
          AZ_BLOB_SONAR="jsonar-${{ github.event.inputs.product_full_version }}.tar.gaz"
        else
          AZ_BLOB_SONAR="jsonar-4.19.0.10.0.tar.gz"
        fi
        
        echo "PATH_TO_DRA_ANALYTICS_VHD=$PATH_TO_DRA_ANALYTICS_VHD" >> $GITHUB_ENV
        echo "PATH_TO_DRA_ADMIN_VHD=$PATH_TO_DRA_ADMIN_VHD" >> $GITHUB_ENV
        echo "AZ_BLOB_SONAR=$AZ_BLOB_SONAR" >> $GITHUB_ENV

    - name: Create terraform.tfvars file
      run: |
        cat << EOF > terraform.tfvars
        resource_group_location = "East US"
        tarball_location = {
          az_resource_group = "dsf-rg"
          az_storage_account = "dsfinstallation"
          az_container = "sonar"
          az_blob = "$AZ_BLOB_SONAR"
        }
        dam_agent_installation_location = {
          az_resource_group = "dsf-rg"
          az_storage_account = "dsfinstallation"
          az_container = "dam"
          az_blob = "Imperva-ragent-UBN-px86_64-b14.6.0.60.0.636085.bsx"
        }
        simulation_db_types_for_agent=["PostgreSql", "MySql"]
        dra_admin_vhd_details = {
          storage_account_name = "dsfinstallation"
          container_name       = "dra"
          path_to_vhd          = "$PATH_TO_DRA_ADMIN_VHD"
        }
        dra_analytics_vhd_details = {
          storage_account_name = "dsfinstallation"
          container_name       = "dra"
          path_to_vhd          = "$PATH_TO_DRA_ANALYTICS_VHD"
        }
        EOF
        
        echo "enable_sonar=${{ matrix.enable_sonar }}" >> terraform.tfvars
        echo "enable_dam=${{ matrix.enable_dam }}" >> terraform.tfvars
        echo "enable_dra=${{ matrix.enable_dra }}" >> terraform.tfvars

        if [[ -n "${DEPLOYMENT_TAGS}" ]]; then
          echo "additional_tags=${DEPLOYMENT_TAGS}" >> terraform.tfvars
        fi

        if [[ -n "${ALLOWED_SSH_CIDRS}" ]]; then
          echo "allowed_ssh_cidrs=${ALLOWED_SSH_CIDRS}" >> terraform.tfvars
        fi

        echo "dam_license=\"license.mprv\"" >> terraform.tfvars

        if [[ "${{ github.event.inputs.product_version }}" != "latest" && -n "${{ github.event.inputs.product_version }}" ]]; then
          if [[ "${{ github.event.inputs.deployment_type }}" == "dam" ]]; then
            echo "dam_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
          elif [[ "${{ github.event.inputs.deployment_type }}" == "dra" ]]; then
            echo "dra_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
          elif [[ "${{ github.event.inputs.deployment_type }}" == "sonar" ]]; then
            echo "sonar_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
          fi
        fi
        cat terraform.tfvars

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Create License File
      run: |
        echo "${{ secrets.DAM_LICENSE }}" | base64 -d > license.mprv
        cat license.mprv

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env:
        TF_WORKSPACE: default

    - name: Cleaning environment
      run: |
        if [ ${{ github.event_name }} == 'schedule' ]; then
          mv main.tf{,_}
          mv outputs.tf{,_}
          mv sonar.tf{,_}
          mv dam.tf{,_}
          mv dra.tf{,_}
          mv agent_sources.tf{,_}
          mv agentless_sources.tf{,_}
          mv networking.tf{,_}
          ls -la $EXAMPLE_DIR
          terraform -chdir=$EXAMPLE_DIR destroy -var dam_license=license.mprv -auto-approve
          mv main.tf{_,}
          mv outputs.tf{_,}
          mv sonar.tf{_,}
          mv dam.tf{_,}
          mv dra.tf{_,}
          mv agent_sources.tf{_,}
          mv agentless_sources.tf{_,}
          mv networking.tf{_,}
        fi

    - name: Terraform Validate
      run: terraform validate

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: terraform apply -auto-approve

    - name: Terraform Output
      if: always()
      run: terraform output -json

    - name: Collect Artifacts
      id: collect-artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: collected-keys-${{ env.TF_WORKSPACE }}
        path: ssh_keys

    - name: Check how was the workflow run
      id: check-trigger
      if: ${{ failure() }}
      run: |
        if [ "${{ github.event_name }}" == "schedule" ]; then
          echo "run-by=Automation" >> $GITHUB_OUTPUT
        else
          echo "run-by=${{ github.actor }}" >> $GITHUB_OUTPUT
        fi

      # This step allows time for investigation of the failed resources before destroying them
    - name: Conditional Delay
      if: ${{ failure() }}
      run: |
        echo "delay_destroy: ${{ inputs.delay_destroy }}"
        if [ "${{ inputs.delay_destroy }}" == "true" ]; then
          echo "Terraform workspace: $TF_WORKSPACE"
          curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ github.workflow }} ${{ env.TF_WORKSPACE }} automation Failed*\n You have ${{ env.DESTROY_DELAY_SECONDS }} seconds to investigate the environment before it is destroyed :alarm_clock:\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          echo ""
          echo "Sleeping for $((DESTROY_DELAY_SECONDS / 60)) minutes before destroying the environment"
          sleep $DESTROY_DELAY_SECONDS
        fi

    - name: Terraform Destroy
      id: destroy
      if: always()
      run: |
        if [ '${{ steps.apply.conclusion }}' == 'success' ] || [ "${{ github.event_name }}" != 'schedule' ]; then
            terraform destroy -auto-approve
        fi

    - name: Terraform Delete Workspace
      if: always()
      run: |
        if [ '${{ steps.destroy.conclusion }}' == 'success' ] && [ ${{ github.event_name }} != 'schedule' ]; then
          terraform workspace delete $TMP_WORKSPACE_NAME
        fi
      env:
        TF_WORKSPACE: default

      # Send job failure to Slack
    - name: Send Slack When Failure
      run: |
        if [ ${{ github.ref }} == 'master' ]; then
          curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} Prod ${{ inputs.workspace }} automation on Azure Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#dsfkit-prod"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        elif [ ${{ github.ref }} == 'dev' ]; then
          curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} dev ${{ inputs.workspace }} automation on Azure Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        else
          curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} private branch ${{ inputs.workspace }} automation on Azure Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
        fi
      if: ${{ failure() }}
