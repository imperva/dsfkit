name: 'Terraform Run Test'

on:
  workflow_dispatch: {}
  push:
    branches:
      - 'add_tests'

env:
  TF_WARN_OUTPUT_ERRORS: 1
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  TF_VAR_gw_count: 1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

permissions:
  contents: read

jobs:
  terraform:

    strategy:
      matrix:
        include:
          - workspace: run_test
            example_dir: ./examples/poc/basic_deployment
            aws_region: ap-southeast-2
          # - workspace: hadr_cli-${{ github.run_number }}-${{ github.run_attempt }}
          #   example_dir: ./examples/poc/hadr_deployment
          #   aws_region: eu-west-1

    name: 'Terraform ${{ matrix.workspace }}'
    runs-on: ubuntu-latest
    env:
      EXAMPLE_DIR: ${{ matrix.example_dir }}
      TF_WORKSPACE: ${{ matrix.workspace }}
      AWS_REGION: ${{ matrix.aws_region }}
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Step 1
      id: step1
      run: exit 1
    - name: Step 2
      if: always()
      id: step2
      run: echo "step 1 conclusion is ${{ steps.step1.conclusion }}"
    - name: Step 3
      id: step3
      if: always()
      run: | 
        if [ '${{ steps.step1.conclusion }}' = 'success' ]
        then 
        echo "step 2 is ok"
        fi
        echo "step 2 conclusion is ${{ steps.step2.conclusion }}"
        echo "step 1 conclusion is ${{ steps.step1.conclusion }}"


#    - name: Checkout
#      uses: actions/checkout@v3
#
#    - name: Change the modules source to local
#      run: find ./examples/ -type f -exec sed -i -f sed.expr {} \;
#
#    - name: Sets env vars for environment
#      run: |
#        echo "TF_VAR_artifacts_s3_bucket=0ed58e18-0c0c-11ed-861d-0242ac120003" >> $GITHUB_ENV
#      if: github.ref != 'refs/heads/"master"'
#
#    - name: Create terraform backend file
#      run: |
#        cat << EOF > $EXAMPLE_DIR/backend.tf
#        terraform {
#          backend "s3" {
#            bucket         = "tf-state-dsfkit-github-tests"
#            key            = "states/terraform.tfstate"
#            dynamodb_table = "terraform-state-lock"
#            region         = "ap-southeast-2"
#          }
#        }
#        EOF
#
#    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v2
#      with:
#        terraform_wrapper: false
#
#    - name: Setup jq
#      uses: sergeysova/jq-action@v2
#      with:
#        cmd: jq -n env
#
#    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      run: terraform -chdir=$EXAMPLE_DIR init
#
#    - name: Terraform Validate
#      run: terraform -chdir=$EXAMPLE_DIR validate
#
#    # Generates an execution plan for Terraform
#    - name: Terraform Plan
#      run: terraform -chdir=$EXAMPLE_DIR plan
#
#    - name: Cleaning envrionment
#      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve
#
#    - name: Terraform Apply
#      run: terraform -chdir=$EXAMPLE_DIR apply -auto-approve
#
#    - name: Terraform Output
#      run: |
#        terraform -chdir=$EXAMPLE_DIR output -json
#
#    - name: Set Environment Variables
#      run: |
#        echo hub_ip=$(terraform -chdir=$EXAMPLE_DIR output -json | jq -r '.dsf_hubs.value.primary.public_dns') >> $GITHUB_ENV
#        echo gw_ip=$(terraform -chdir=$EXAMPLE_DIR output -json | jq -r '.dsf_agentless_gw_group.value."gw-0".private_dns') >> $GITHUB_ENV
#        echo dsf_ssh_key_file_name=$EXAMPLE_DIR/$(terraform -chdir=$EXAMPLE_DIR output -json | jq -r '.dsf_private_ssh_key_file_path.value') >> $GITHUB_ENV
#
#    # Test the ssh connectivity to the Hub and GW, it checks both of them because the connection to the GW is allowed from the Hub only via proxy
#    - name: Check Aduit data
#      uses: appleboy/ssh-action@v0.1.6
#      id: test_audit
#      with:
#        host: ${{ env.hub_ip }}
#        username: ec2-user
#        key_path: ${{ env.dsf_ssh_key_file_name }}
#        port: 22
#        command_timeout: "2h"
#        script: |
#          sleep 35m
#          for run in {1..5}; do sleep 5m; res=$(sudo curl --cert "${JSONAR_LOCALDIR}/ssl/client/admin/cert.pem" --key "${JSONAR_LOCALDIR}/ssl/client/admin/key.pem" -X POST  -k -H 'sonarg-user: admin.admin' https://localhost:8088/sonargd-session/_count | jq .count); echo $res; if [ $res -gt 0 ]; then exit 0; fi; done
#          if [ $res -le 0 ]; then exit 1; fi
#
#    - name: Terraform Destroy
#    #   if: always()
#      run: terraform -chdir=$EXAMPLE_DIR destroy -auto-approve

    # Send job failure to Slack
    # - name: Send Slack by action-slack
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     fields: message,author,action,eventName,ref,workflow,job,pullRequest
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}
    #   if: ${{ failure() }} 

    # - name: Slack Notification - Slack Notify
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}
    #   if: ${{ failure() }}

    # - name: Send GitHub Action trigger data to Slack workflow
    #   id: slack
    #   uses: slackapi/slack-github-action@v1.23.0
    #   with:
    #     payload: |
    #       {
    #         "key": "value",
    #         "foo": "bar"
    #       }
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_TEST }}
    #   if: ${{ always() }}