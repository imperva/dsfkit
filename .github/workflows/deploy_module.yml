name: 'Deploy Module'

on:
  workflow_call:
    secrets:
      PUSH_TO_OTHER_REPOS_TOKEN_ADMIN:
        required: true

  workflow_dispatch:
  # release:? [published]
  # push:
  #   branches:
  #     - '*'

permissions:
  contents: read

jobs:
  copy_module_to_new_repo:
    name: 'Export module'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        include:
          # Sonar
          ## aws provider
          - source_module: "aws/hub"
            destination_repo: "terraform-aws-dsf-hub"
            hidden_submodules: "aws/sonar-base-instance aws/statistics null/statistics"
            begin_tag: 1.0.0
          - source_module: "aws/agentless-gw"
            destination_repo: "terraform-aws-dsf-agentless-gw"
            hidden_submodules: "aws/sonar-base-instance aws/statistics null/statistics"
            begin_tag: 1.0.0

          - source_module: "aws/poc-db-onboarder"
            destination_repo: "terraform-aws-dsf-poc-db-onboarder"
            public_submodule: "aws/rds-mysql-db aws/rds-mssql-db"
            begin_tag: 1.0.0

          - source_module: "aws/sonar-upgrader"
            destination_repo: "terraform-aws-dsf-sonar-upgrader"
            begin_tag: 1.5.6

          ## azurerm provider
          - source_module: "azurerm/hub"
            destination_repo: "terraform-azurerm-dsf-hub"
            hidden_submodules: "azurerm/sonar-base-instance azurerm/statistics null/statistics"
            begin_tag: 1.0.0
          - source_module: "azurerm/agentless-gw"
            destination_repo: "terraform-azurerm-dsf-agentless-gw"
            hidden_submodules: "azurerm/sonar-base-instance azurerm/statistics null/statistics"
            begin_tag: 1.0.0

          ## null provider
          - source_module: "null/hadr"
            destination_repo: "terraform-null-dsf-hadr"
            begin_tag: 1.0.0
          - source_module: "null/federation"
            destination_repo: "terraform-null-dsf-federation"
            begin_tag: 1.0.0

          # DAM
          ## aws provider
          - source_module: "aws/mx"
            destination_repo: "terraform-aws-dsf-mx"
            hidden_submodules: "aws/dam-base-instance aws/statistics null/statistics"
            begin_tag: 1.0.0
          - source_module: "aws/agent-gw"
            destination_repo: "terraform-aws-dsf-agent-gw"
            hidden_submodules: "aws/dam-base-instance aws/statistics null/statistics"
            begin_tag: 1.0.0
          - source_module: "aws/db-with-agent"
            destination_repo: "terraform-aws-dsf-db-with-agent"
            begin_tag: 1.0.0

          ## azurerm provider
          - source_module: "azurerm/mx"
            destination_repo: "terraform-azurerm-dsf-mx"
            hidden_submodules: "azurerm/dam-base-instance azurerm/statistics null/statistics"
            begin_tag: 1.7.4
          - source_module: "azurerm/agent-gw"
            destination_repo: "terraform-azurerm-dsf-agent-gw"
            hidden_submodules: "azurerm/dam-base-instance azurerm/statistics null/statistics"
            begin_tag: 1.7.4
          - source_module: "azurerm/db-with-agent"
            destination_repo: "terraform-azurerm-dsf-db-with-agent"
            begin_tag: 1.7.4

          ## null provider
          - source_module: "null/agent-gw-cluster-setup"
            destination_repo: "terraform-null-dsf-agent-gw-cluster-setup"
            begin_tag: 1.0.0

          # DRA
          ## aws provider
          - source_module: "aws/dra-admin"
            destination_repo: "terraform-aws-dsf-dra-admin"
            hidden_submodules: "aws/statistics null/statistics"
            begin_tag: 1.0.0
          - source_module: "aws/dra-analytics"
            destination_repo: "terraform-aws-dsf-dra-analytics"
            hidden_submodules: "aws/statistics null/statistics"
            begin_tag: 1.0.0

          # Globals
          ## aws provider
          - source_module: "aws/core/globals"
            destination_repo: "terraform-aws-dsf-globals"
            public_submodule: "aws/core/key_pair"
            begin_tag: 1.0.0
          ## azurerm provider
          - source_module: "azurerm/core/globals"
            destination_repo: "terraform-azurerm-dsf-globals"
            begin_tag: 1.0.0
    env:
      source_module: ${{ matrix.source_module }}
      destination_repo: ${{ matrix.destination_repo }}
      hidden_submodules: ${{ matrix.hidden_submodules }}
      public_submodule: ${{ matrix.public_submodule }}
      begin_tag: ${{ matrix.begin_tag }}

    outputs:
      module_github_repo: ${{ format('https://github.com/imperva/{0}', matrix.destination_repo) }}
    
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'
          ref: 'master'

      - name: Filter branch
        run: |
          set -x
          git branch
          if [ -n "${hidden_submodules}" ]; then
            cmd=""
            for i in ${hidden_submodules}; do
            	target_dir=_modules/$i
            	cmd="$cmd mkdir -p $(dirname modules/${source_module}/$target_dir); mv modules/$i modules/${source_module}/$target_dir;"
            	cmd="$cmd sed -i \"s/\/modules\//\/_modules\//g\" modules/${source_module}/${target_dir}/*.tf;"
            done
            cmd="$cmd sed -i \"s/..\/..\/..\/modules/.\/_modules/g\" modules/${source_module}/*.tf;"
            cmd="$cmd true;"
            git filter-branch -f --prune-empty --tree-filter "$cmd" --tag-name-filter cat -- --all HEAD
          fi
          
          if [ -n "${public_submodule}" ]; then
            for m in ${public_submodule}; do
              git filter-branch -f --prune-empty --tree-filter 'mkdir -p modules/'${source_module}'/modules; mv modules/'${m}' modules/'${source_module}'/modules/; true;' --tag-name-filter cat -- --all HEAD
            done
          fi
          git filter-branch -f --prune-empty --tree-filter 'mv LICENSE.md modules/'${source_module}'/ 2>/dev/null || true' --tag-name-filter cat -- --all HEAD
          git filter-branch -f --prune-empty --subdirectory-filter modules/${source_module}/ --tag-name-filter cat -- --all HEAD

      - name: Push to module repo
        env:
          github_token: ${{ secrets.PUSH_TO_OTHER_REPOS_TOKEN_ADMIN }}
        run: |
          find . | grep -v ".git/"
          git config --unset-all http.https://github.com/.extraheader # override github_action own authentication method
          git remote set-url origin https://${github_token}@github.com/imperva/${destination_repo}.git
          git branch -m main
          refs=$(git ls-remote --tags 2>/dev/null | awk '{print $NF}')
          if [ -n "$refs" ]; then
            git push origin --delete $(git ls-remote --tags 2>/dev/null | awk '{print $NF}')
          fi
          latest_tag=$(git tag -l | sort -V | tail -n 1)

          all_tags=$(git tag)
          removed_tags=()
          # Loop through each tag and filter if less than begin_tag
          for tag in ${all_tags}; do
              if [[ "$tag" < "${begin_tag}" ]]; then
                  removed_tags+=("$tag")
              fi
          done

          echo "Begin tag: ${begin_tag}, latest tag: ${latest_tag}, removed tags: ${removed_tags[@]}"

          # push all repo but latest tag and removed tags
          git tag -d ${latest_tag}
          for tag in "${removed_tags[@]}"; do
              git tag -d ${tag}
          done
          git push -f origin HEAD:main --tags

          # push latest tag (to trigger terraform registery latest release discovery)
          git tag ${latest_tag}
          git push -f origin HEAD:main --tags
