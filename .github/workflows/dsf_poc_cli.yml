name: 'DSF POC CLI - AWS'

on:
  workflow_call:
    inputs:
      use_modules_from_terraform_registry:
        required: true
        type: boolean
      deployment_type:
        required: false
        type: string
        default: 'all'
      product_version:
        type: string
        default: 'latest'
        required: false

    # defining secrets here is required since this yml is referenced by nightly_manager.yml
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: true
      DAM_LICENSE:
        required: true
      ALLOWED_SSH_CIDRS:
        required: true
      DEPLOYMENT_TAGS:
        required: true

  workflow_dispatch:
    inputs:
      use_modules_from_terraform_registry:
        description: 'Use modules from Terraform Registry'
        type: boolean
        required: false
      delay_destroy:
        description: 'Delay the destroy step and subsequent steps to allow investigation'
        type: boolean
        default: false
        required: false
      deployment_type:
        description: 'Choose the type of deployments to run: all (default), sonar, dam, dra'
        type: string
        default: 'all'
        required: false
      product_version:
        description: 'Product (DAM, DRA, SONAR) version to deploy, default is latest'
        type: string
        default: 'latest'
        required: false
      use_sonar_cloud:
        description: 'Use Sonar Cloud instead of Imperva'
        type: boolean
        default: false
        required: false
  push:
    branches:
      - 'dev'
    paths:
      - 'modules/aws/**'
      - '!modules/aws/sonar-upgrader/**'
      - '!modules/aws/statistics/*'
      - 'modules/null/**'
      - '!modules/null/statistics/*'
      - 'examples/aws/poc/dsf_deployment/*'

  pull_request:
    types:
      - 'opened'
      - 'reopened'
    branches:
      - 'dev'
    paths:
      - 'modules/aws/**'
      - '!modules/aws/sonar-upgrader/*'
      - '!modules/aws/statistics/*'
      - 'modules/null/**'
      - '!modules/null/statistics/*'
      - 'examples/aws/poc/dsf_deployment/*'

env:
  TF_CLI_ARGS: "-no-color"
  TF_INPUT: 0
  AWS_ACCESS_KEY_ID: ${{ (inputs.use_sonar_cloud && secrets.SONAR_AWS_ACCESS_KEY_ID) || secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ (inputs.use_sonar_cloud && secrets.SONAR_AWS_SECRET_ACCESS_KEY) || secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: eu-west-2
  DESTROY_DELAY_SECONDS: 1800
  WORKING_DIRECTORY: examples/aws/poc/dsf_deployment
  TERRAFORM_VERSION: "~1.7.0"

permissions:
  contents: read

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set Matrix
        id: set-matrix
        env:
          VAR: ${{ github.event.inputs.deployment_type || 'all' }}
        run: |
          MATRIX=$(jq -n --compact-output --arg var "$VAR" '{
            "include": [
              (if $var == "all" then {"name":"DSF POC","workspace":"dsf_cli-all-","enable_sonar":true,"enable_dam":true,"enable_dra":true} else empty end),
              (if $var == "all" or $var == "sonar" then {"name":"DSF POC - SONAR","workspace":"dsf_cli-sonar-","enable_sonar":true,"enable_dam":false,"enable_dra":false} else empty end),
              (if $var == "all" or $var == "dam" then {"name":"DSF POC - DAM","workspace":"dsf_cli-dam-","enable_sonar":false,"enable_dam":true,"enable_dra":false} else empty end),
              (if $var == "all" or $var == "dra" then {"name":"DSF POC - DRA","workspace":"dsf_cli-dra-","enable_sonar":false,"enable_dam":false,"enable_dra":true} else empty end)
            ]
          }')

          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"

  terraform:
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}

    name: '${{ matrix.name }}'
    runs-on: ubuntu-latest
    environment: test

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Workspace Name
        run: |
          echo "Event Name: ${{ github.event_name }}"
          if [ ${{ github.event_name }} == 'schedule' ]; then
            echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.event_name }}-${{ github.ref }} >> $GITHUB_ENV
          else
            echo TF_WORKSPACE=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref }} >> $GITHUB_ENV
            echo TMP_WORKSPACE_NAME=${{ matrix.workspace }}${{ github.run_number }}-${{ github.run_attempt }}-${{ github.ref }} >> $GITHUB_ENV
          fi

      - name: Change the modules source to local
        if: ${{ inputs.use_modules_from_terraform_registry == false }}
        run: find -type f -exec sed -i -f "${GITHUB_WORKSPACE}/sed.expr" {} \;

      - name: Create terraform backend file
        run: |
          cat << EOF > backend.tf
          terraform {
            backend "s3" {
              bucket         = "terraform-state-bucket-dsfkit-github-tests"
              key            = "states/terraform.tfstate"
              dynamodb_table = "terraform-state-lock"
              region         = "us-east-1"
            }
          }
          EOF

      - name: Crate terraform var file
        env:
          DEPLOYMENT_TAGS: "${{ secrets.DEPLOYMENT_TAGS }}"
          ALLOWED_SSH_CIDRS: "${{ secrets.ALLOWED_SSH_CIDRS }}"
        run: |
          if [[ -n "${DEPLOYMENT_TAGS}" ]]; then
            echo "additional_tags=${DEPLOYMENT_TAGS}" >> terraform.tfvars
          fi

          if [[ -n "${ALLOWED_SSH_CIDRS}" ]]; then
            echo "allowed_ssh_cidrs=${ALLOWED_SSH_CIDRS}" >> terraform.tfvars
          fi

          echo "dam_license=\"license.mprv\"" >> terraform.tfvars

          if [[ "${{ github.event.inputs.product_version }}" != "latest" && -n "${{ github.event.inputs.product_version }}" ]]; then
            if [[ "${{ github.event.inputs.deployment_type }}" == "dam" ]]; then
              echo "dam_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
            elif [[ "${{ github.event.inputs.deployment_type }}" == "dra" ]]; then
              echo "dra_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
            elif [[ "${{ github.event.inputs.deployment_type }}" == "sonar" ]]; then
              echo "sonar_version=\"${{ github.event.inputs.product_version }}\"" >> terraform.tfvars
            fi
          fi
          cat terraform.tfvars

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create License File
        run: |
          echo "${{ secrets.DAM_LICENSE }}" | base64 -d > license.mprv
          cat license.mprv

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          TF_WORKSPACE: default

      - name: Cleaning environment
        run: |
          if [ ${{ github.event_name }} == 'schedule' ]; then
            mv main.tf{,_}
            mv outputs.tf{,_}
            mv dam.tf{,_}
            mv dra.tf{,_}
            mv sonar.tf{,_}
            mv networking.tf{,_}
            mv agentless_sources.tf{,_}
            mv agent_sources.tf{,_}
            terraform destroy -auto-approve
            mv main.tf{_,}
            mv outputs.tf{_,}
            mv dam.tf{_,}
            mv dra.tf{_,}
            mv sonar.tf{_,}
            mv networking.tf{_,}
            mv agentless_sources.tf{_,}
            mv agent_sources.tf{_,}
          fi

      - name: Terraform Validate
        run: terraform validate

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        id: apply
        # if: github.ref == 'refs/heads/"master"' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve

      - name: Terraform Output
        if: always()
        run: terraform output -json

      - name: Collect Artifacts
        id: collect-artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: collected-keys-${{ env.TF_WORKSPACE }}
          path: ssh_keys

      - name: Check how was the workflow run
        id: check-trigger
        if: ${{ failure() }}
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "run-by=Automation" >> $GITHUB_OUTPUT
          else
            echo "run-by=${{ github.actor }}" >> $GITHUB_OUTPUT
          fi

      # This step allows time for investigation of the failed resources before destroying them
      - name: Conditional Delay
        if: ${{ failure() }}
        run: |
          echo "delay_destroy: ${{ inputs.delay_destroy }}"
          if [ "${{ inputs.delay_destroy }}" == "true" ]; then
            echo "Terraform workspace: $TF_WORKSPACE"
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ github.workflow }} ${{ env.TF_WORKSPACE }} automation Failed*\n You have ${{ env.DESTROY_DELAY_SECONDS }} seconds to investigate the environment before it is destroyed :alarm_clock:\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
            echo ""
            echo "Sleeping for $((DESTROY_DELAY_SECONDS / 60)) minutes before destroying the environment"
            sleep $DESTROY_DELAY_SECONDS
          fi

      - name: Terraform Destroy
        id: destroy
        if: always()
        run: |
          if [ '${{ steps.apply.conclusion }}' == 'success' ] || [ ${{ github.event_name }} != 'schedule' ]; then
            terraform destroy -auto-approve
          fi

      - name: Terraform Delete Workspace
        if: always()
        run: |
          if [ '${{ steps.destroy.conclusion }}' == 'success' ] && [ ${{ github.event_name }} != 'schedule' ]; then
            terraform workspace delete $TMP_WORKSPACE_NAME
          fi
        env:
          TF_WORKSPACE: default

      # Send job failure to Slack
      - name: Send Slack When Failure
        run: |
          if [ ${{ github.ref }} == 'master' ]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} Prod ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#dsfkit-prod"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          elif [ ${{ github.ref }} == 'dev' ]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} dev ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} private branch ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
        if: ${{ failure() }}
