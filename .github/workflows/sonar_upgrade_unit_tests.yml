name: 'Sonar Upgrade Unit Tests'

on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
  workflow_dispatch:

  push:
    branches:
      - 'master'
      - 'dev'
    paths:
      - 'modules/aws/sonar-upgrader/**'
      - 'examples/sonar_upgrade/*'

  pull_request:
    types:
      - 'opened'
      - 'reopened'
    branches:
      - 'master'
      - 'dev'
    paths:
      - 'modules/aws/sonar-upgrader/**'
      - 'examples/sonar_upgrade/*'

permissions:
  contents: read

jobs:
  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Sonar Upgrade unit tests

    name: '${{ matrix.name }}'
    runs-on: ubuntu-latest
    env:
      PYTHON_UPGRADER_DIR: modules/aws/sonar-upgrader/python_upgrader
    environment: test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Pick ref
        run: |
          if [ -z "${{ inputs.explicit_ref }}" ]; then
            echo REF=${{ github.ref }} >> $GITHUB_ENV;
          else
            echo REF=${{ inputs.explicit_ref }} >> $GITHUB_ENV;
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.REF }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10.11'

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Set up Python environment
        working-directory: ${{ env.PYTHON_UPGRADER_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install --user virtualenv
          python -m virtualenv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install -r tests/requirements-dev.txt

      - name: Run unit tests
        working-directory: ${{ env.PYTHON_UPGRADER_DIR }}
        run: |
          source venv/bin/activate
          pytest

      - name: Check how was the workflow run
        id: check-trigger
        if: ${{ failure() }}
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "run-by=Automation" >> $GITHUB_OUTPUT
          else
            echo "run-by=${{ github.actor }}" >> $GITHUB_OUTPUT
          fi

        # Send job failure to Slack
      - name: Send Slack When Failure
        run: |
          if [ ${{ env.REF }} == 'master' ]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} Prod ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#dsfkit-prod"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          elif [ ${{ env.REF }} == 'dev' ]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} dev ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":":exclamation: :exclamation: :exclamation:\n*${{ matrix.name }} private branch ${{ inputs.workspace }} automation Failed*\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Please check the job!>\nRun by: ${{ steps.check-trigger.outputs.run-by }}", "channel": "#edsf_automation"}' ${{ secrets.SLACK_WEBHOOK_URL }}
          fi
        if: ${{ failure() }}
