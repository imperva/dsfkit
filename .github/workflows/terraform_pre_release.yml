name: 'Pre release'

on:
  workflow_dispatch:
    inputs:
      future_release:
        description: 'Tag for the future release (d.d.d)'
        required: true

permissions:
  contents: write

env:
  src_branch: "d2"
  dst_branch: "d1"
  # src_branch: "dev"
  # dst_branch: "master"

jobs:
  validate_arguments:
    name: 'Validate arguments'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Validate source branch
        run: |
          if [ "${GITHUB_REF#refs/heads/}" != "${src_branch}" ]; then
            echo "Invalid branch. This workflow can only be ran on ${src_branch} branch. Got ${GITHUB_REF#refs/heads/}."
            exit 1
          fi
      - name: Validate release version value
        run: |
          if ! echo ${{ github.event.inputs.future_release }} | grep -E '^([0-9]{1,3}\.){2}[0-9]{1,3}$'; then
            echo "Future release should be in the format of x.y.z where x, y & z are all numbers"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.src_branch }}

      - name: Check source branch is "fast-forward" mergale
        run: |
          git merge-base --is-ancestor origin/${dst_branch} ${src_branch}

  update_versions:
    name: 'Update versions in examples'
    needs: validate_arguments
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.src_branch }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Update modules' versions in examples
        run: |
          find ./examples/ -type f -exec sed -i 's;.*latest release tag.*;version="'${{ github.event.inputs.future_release }}'" # latest release tag;' {} \; 

      - name: Run terraform linter
        run: |
          terraform fmt -recursive

      - name: Zip per examples
        run: |
          for d in $(find ./examples -type d -links 2); do zip -r ${d}/$(basename ${d}).zip ${d}; done

      - name: commit changes to git repo
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Automatic commit before release [release=${{ github.event.inputs.future_release }}] | [skip actions]
          file_pattern: './examples'

  merge:
    name: 'Merge'
    needs: update_versions
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ env.dst_branch }}

      - name: Merge
        run: |
          git merge origin/${src_branch} --ff-only
          git push

  deploy_modules:
    needs: merge
    uses: ./.github/workflows/terraform_export_module.yml

  test_plan:
    needs: deploy_modules
    uses: ./.github/workflows/terraform_plan.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test_apply:
    needs: deploy_modules
    uses: ./.github/workflows/terraform_plan.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  